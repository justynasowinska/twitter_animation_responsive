e19a2342d117f1b0cc4b26f43de8a04a
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var DeprecatedImageStylePropTypes = require('DeprecatedImageStylePropTypes');

var TextStylePropTypes = require('TextStylePropTypes');

var DeprecatedViewStylePropTypes = require('DeprecatedViewStylePropTypes');

var processColor = require('processColor');

var processTransform = require('processTransform');

var sizesDiffer = require('sizesDiffer');

var ReactNativeStyleAttributes = {};

for (var _i = 0, _Object$keys = Object.keys((0, _objectSpread2.default)({}, DeprecatedViewStylePropTypes, TextStylePropTypes, DeprecatedImageStylePropTypes)); _i < _Object$keys.length; _i++) {
  var attributeName = _Object$keys[_i];
  ReactNativeStyleAttributes[attributeName] = true;
}

ReactNativeStyleAttributes.transform = {
  process: processTransform
};
ReactNativeStyleAttributes.shadowOffset = {
  diff: sizesDiffer
};
var colorAttributes = {
  process: processColor
};
ReactNativeStyleAttributes.backgroundColor = colorAttributes;
ReactNativeStyleAttributes.borderBottomColor = colorAttributes;
ReactNativeStyleAttributes.borderColor = colorAttributes;
ReactNativeStyleAttributes.borderLeftColor = colorAttributes;
ReactNativeStyleAttributes.borderRightColor = colorAttributes;
ReactNativeStyleAttributes.borderTopColor = colorAttributes;
ReactNativeStyleAttributes.borderStartColor = colorAttributes;
ReactNativeStyleAttributes.borderEndColor = colorAttributes;
ReactNativeStyleAttributes.color = colorAttributes;
ReactNativeStyleAttributes.shadowColor = colorAttributes;
ReactNativeStyleAttributes.textDecorationColor = colorAttributes;
ReactNativeStyleAttributes.tintColor = colorAttributes;
ReactNativeStyleAttributes.textShadowColor = colorAttributes;
ReactNativeStyleAttributes.overlayColor = colorAttributes;
module.exports = ReactNativeStyleAttributes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlJlYWN0TmF0aXZlU3R5bGVBdHRyaWJ1dGVzLmpzIl0sIm5hbWVzIjpbIkRlcHJlY2F0ZWRJbWFnZVN0eWxlUHJvcFR5cGVzIiwicmVxdWlyZSIsIlRleHRTdHlsZVByb3BUeXBlcyIsIkRlcHJlY2F0ZWRWaWV3U3R5bGVQcm9wVHlwZXMiLCJwcm9jZXNzQ29sb3IiLCJwcm9jZXNzVHJhbnNmb3JtIiwic2l6ZXNEaWZmZXIiLCJSZWFjdE5hdGl2ZVN0eWxlQXR0cmlidXRlcyIsIk9iamVjdCIsImtleXMiLCJhdHRyaWJ1dGVOYW1lIiwidHJhbnNmb3JtIiwicHJvY2VzcyIsInNoYWRvd09mZnNldCIsImRpZmYiLCJjb2xvckF0dHJpYnV0ZXMiLCJiYWNrZ3JvdW5kQ29sb3IiLCJib3JkZXJCb3R0b21Db2xvciIsImJvcmRlckNvbG9yIiwiYm9yZGVyTGVmdENvbG9yIiwiYm9yZGVyUmlnaHRDb2xvciIsImJvcmRlclRvcENvbG9yIiwiYm9yZGVyU3RhcnRDb2xvciIsImJvcmRlckVuZENvbG9yIiwiY29sb3IiLCJzaGFkb3dDb2xvciIsInRleHREZWNvcmF0aW9uQ29sb3IiLCJ0aW50Q29sb3IiLCJ0ZXh0U2hhZG93Q29sb3IiLCJvdmVybGF5Q29sb3IiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFVQTs7Ozs7O0FBRUEsSUFBTUEsNkJBQTZCLEdBQUdDLE9BQU8sQ0FBQywrQkFBRCxDQUE3Qzs7QUFDQSxJQUFNQyxrQkFBa0IsR0FBR0QsT0FBTyxDQUFDLG9CQUFELENBQWxDOztBQUNBLElBQU1FLDRCQUE0QixHQUFHRixPQUFPLENBQUMsOEJBQUQsQ0FBNUM7O0FBRUEsSUFBTUcsWUFBWSxHQUFHSCxPQUFPLENBQUMsY0FBRCxDQUE1Qjs7QUFDQSxJQUFNSSxnQkFBZ0IsR0FBR0osT0FBTyxDQUFDLGtCQUFELENBQWhDOztBQUNBLElBQU1LLFdBQVcsR0FBR0wsT0FBTyxDQUFDLGFBQUQsQ0FBM0I7O0FBRUEsSUFBTU0sMEJBQTBCLEdBQUcsRUFBbkM7O0FBRUEsZ0NBQTRCQyxNQUFNLENBQUNDLElBQVAsaUNBQ3ZCTiw0QkFEdUIsRUFFdkJELGtCQUZ1QixFQUd2QkYsNkJBSHVCLEVBQTVCLGtDQUlJO0FBSkMsTUFBTVUsYUFBYSxtQkFBbkI7QUFLSEgsRUFBQUEsMEJBQTBCLENBQUNHLGFBQUQsQ0FBMUIsR0FBNEMsSUFBNUM7QUFDRDs7QUFFREgsMEJBQTBCLENBQUNJLFNBQTNCLEdBQXVDO0FBQUNDLEVBQUFBLE9BQU8sRUFBRVA7QUFBVixDQUF2QztBQUNBRSwwQkFBMEIsQ0FBQ00sWUFBM0IsR0FBMEM7QUFBQ0MsRUFBQUEsSUFBSSxFQUFFUjtBQUFQLENBQTFDO0FBRUEsSUFBTVMsZUFBZSxHQUFHO0FBQUNILEVBQUFBLE9BQU8sRUFBRVI7QUFBVixDQUF4QjtBQUNBRywwQkFBMEIsQ0FBQ1MsZUFBM0IsR0FBNkNELGVBQTdDO0FBQ0FSLDBCQUEwQixDQUFDVSxpQkFBM0IsR0FBK0NGLGVBQS9DO0FBQ0FSLDBCQUEwQixDQUFDVyxXQUEzQixHQUF5Q0gsZUFBekM7QUFDQVIsMEJBQTBCLENBQUNZLGVBQTNCLEdBQTZDSixlQUE3QztBQUNBUiwwQkFBMEIsQ0FBQ2EsZ0JBQTNCLEdBQThDTCxlQUE5QztBQUNBUiwwQkFBMEIsQ0FBQ2MsY0FBM0IsR0FBNENOLGVBQTVDO0FBQ0FSLDBCQUEwQixDQUFDZSxnQkFBM0IsR0FBOENQLGVBQTlDO0FBQ0FSLDBCQUEwQixDQUFDZ0IsY0FBM0IsR0FBNENSLGVBQTVDO0FBQ0FSLDBCQUEwQixDQUFDaUIsS0FBM0IsR0FBbUNULGVBQW5DO0FBQ0FSLDBCQUEwQixDQUFDa0IsV0FBM0IsR0FBeUNWLGVBQXpDO0FBQ0FSLDBCQUEwQixDQUFDbUIsbUJBQTNCLEdBQWlEWCxlQUFqRDtBQUNBUiwwQkFBMEIsQ0FBQ29CLFNBQTNCLEdBQXVDWixlQUF2QztBQUNBUiwwQkFBMEIsQ0FBQ3FCLGVBQTNCLEdBQTZDYixlQUE3QztBQUNBUiwwQkFBMEIsQ0FBQ3NCLFlBQTNCLEdBQTBDZCxlQUExQztBQUVBZSxNQUFNLENBQUNDLE9BQVAsR0FBaUJ4QiwwQkFBakIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXQgc3RyaWN0LWxvY2FsXG4gKiBAZmxvd1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgRGVwcmVjYXRlZEltYWdlU3R5bGVQcm9wVHlwZXMgPSByZXF1aXJlKCdEZXByZWNhdGVkSW1hZ2VTdHlsZVByb3BUeXBlcycpO1xuY29uc3QgVGV4dFN0eWxlUHJvcFR5cGVzID0gcmVxdWlyZSgnVGV4dFN0eWxlUHJvcFR5cGVzJyk7XG5jb25zdCBEZXByZWNhdGVkVmlld1N0eWxlUHJvcFR5cGVzID0gcmVxdWlyZSgnRGVwcmVjYXRlZFZpZXdTdHlsZVByb3BUeXBlcycpO1xuXG5jb25zdCBwcm9jZXNzQ29sb3IgPSByZXF1aXJlKCdwcm9jZXNzQ29sb3InKTtcbmNvbnN0IHByb2Nlc3NUcmFuc2Zvcm0gPSByZXF1aXJlKCdwcm9jZXNzVHJhbnNmb3JtJyk7XG5jb25zdCBzaXplc0RpZmZlciA9IHJlcXVpcmUoJ3NpemVzRGlmZmVyJyk7XG5cbmNvbnN0IFJlYWN0TmF0aXZlU3R5bGVBdHRyaWJ1dGVzID0ge307XG5cbmZvciAoY29uc3QgYXR0cmlidXRlTmFtZSBvZiBPYmplY3Qua2V5cyh7XG4gIC4uLkRlcHJlY2F0ZWRWaWV3U3R5bGVQcm9wVHlwZXMsXG4gIC4uLlRleHRTdHlsZVByb3BUeXBlcyxcbiAgLi4uRGVwcmVjYXRlZEltYWdlU3R5bGVQcm9wVHlwZXMsXG59KSkge1xuICBSZWFjdE5hdGl2ZVN0eWxlQXR0cmlidXRlc1thdHRyaWJ1dGVOYW1lXSA9IHRydWU7XG59XG5cblJlYWN0TmF0aXZlU3R5bGVBdHRyaWJ1dGVzLnRyYW5zZm9ybSA9IHtwcm9jZXNzOiBwcm9jZXNzVHJhbnNmb3JtfTtcblJlYWN0TmF0aXZlU3R5bGVBdHRyaWJ1dGVzLnNoYWRvd09mZnNldCA9IHtkaWZmOiBzaXplc0RpZmZlcn07XG5cbmNvbnN0IGNvbG9yQXR0cmlidXRlcyA9IHtwcm9jZXNzOiBwcm9jZXNzQ29sb3J9O1xuUmVhY3ROYXRpdmVTdHlsZUF0dHJpYnV0ZXMuYmFja2dyb3VuZENvbG9yID0gY29sb3JBdHRyaWJ1dGVzO1xuUmVhY3ROYXRpdmVTdHlsZUF0dHJpYnV0ZXMuYm9yZGVyQm90dG9tQ29sb3IgPSBjb2xvckF0dHJpYnV0ZXM7XG5SZWFjdE5hdGl2ZVN0eWxlQXR0cmlidXRlcy5ib3JkZXJDb2xvciA9IGNvbG9yQXR0cmlidXRlcztcblJlYWN0TmF0aXZlU3R5bGVBdHRyaWJ1dGVzLmJvcmRlckxlZnRDb2xvciA9IGNvbG9yQXR0cmlidXRlcztcblJlYWN0TmF0aXZlU3R5bGVBdHRyaWJ1dGVzLmJvcmRlclJpZ2h0Q29sb3IgPSBjb2xvckF0dHJpYnV0ZXM7XG5SZWFjdE5hdGl2ZVN0eWxlQXR0cmlidXRlcy5ib3JkZXJUb3BDb2xvciA9IGNvbG9yQXR0cmlidXRlcztcblJlYWN0TmF0aXZlU3R5bGVBdHRyaWJ1dGVzLmJvcmRlclN0YXJ0Q29sb3IgPSBjb2xvckF0dHJpYnV0ZXM7XG5SZWFjdE5hdGl2ZVN0eWxlQXR0cmlidXRlcy5ib3JkZXJFbmRDb2xvciA9IGNvbG9yQXR0cmlidXRlcztcblJlYWN0TmF0aXZlU3R5bGVBdHRyaWJ1dGVzLmNvbG9yID0gY29sb3JBdHRyaWJ1dGVzO1xuUmVhY3ROYXRpdmVTdHlsZUF0dHJpYnV0ZXMuc2hhZG93Q29sb3IgPSBjb2xvckF0dHJpYnV0ZXM7XG5SZWFjdE5hdGl2ZVN0eWxlQXR0cmlidXRlcy50ZXh0RGVjb3JhdGlvbkNvbG9yID0gY29sb3JBdHRyaWJ1dGVzO1xuUmVhY3ROYXRpdmVTdHlsZUF0dHJpYnV0ZXMudGludENvbG9yID0gY29sb3JBdHRyaWJ1dGVzO1xuUmVhY3ROYXRpdmVTdHlsZUF0dHJpYnV0ZXMudGV4dFNoYWRvd0NvbG9yID0gY29sb3JBdHRyaWJ1dGVzO1xuUmVhY3ROYXRpdmVTdHlsZUF0dHJpYnV0ZXMub3ZlcmxheUNvbG9yID0gY29sb3JBdHRyaWJ1dGVzO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0TmF0aXZlU3R5bGVBdHRyaWJ1dGVzO1xuIl19