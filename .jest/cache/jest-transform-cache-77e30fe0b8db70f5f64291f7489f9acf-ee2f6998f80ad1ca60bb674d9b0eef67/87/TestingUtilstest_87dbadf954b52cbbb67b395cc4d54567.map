{"version":3,"sources":["TestingUtils.test.ts"],"names":["describe","it","__DEV__","testID","result","expect","toBe","undefined","Wrapper","React","createElement","component","toHaveLength"],"mappings":";;AAAA;;AACA;;AAEA;;AAEAA,QAAQ,CAAC,WAAD,EAAc,YAAM;AACxBC,EAAAA,EAAE,CAAC,2CAAD,EAA8C,YAAM;AAElDC,IAAAA,OAAO,GAAG,IAAV;AACA,QAAMC,MAAM,GAAG,YAAf;AAEA,QAAMC,MAAM,GAAG,6BAAUD,MAAV,CAAf;AACAE,IAAAA,MAAM,CAACD,MAAD,CAAN,CAAeE,IAAf,CAAoBH,MAApB;AAEH,GARC,CAAF;AAUAF,EAAAA,EAAE,CAAC,6CAAD,EAAgD,YAAM;AAEpDC,IAAAA,OAAO,GAAG,KAAV;AAEA,QAAMC,MAAM,GAAG,eAAf;AAEA,QAAMC,MAAM,GAAG,6BAAUD,MAAV,CAAf;AACAE,IAAAA,MAAM,CAACD,MAAD,CAAN,CAAeE,IAAf,CAAoBC,SAApB;AACH,GARC,CAAF;AASH,CApBO,CAAR;AAsBAP,QAAQ,CAAC,cAAD,EAAiB,YAAM;AAC3BC,EAAAA,EAAE,CAAC,mDAAD,EAAsD,YAAM;AAC1D,QAAME,MAAM,GAAG,YAAf;;AACA,QAAMK,OAAO,GAAGC,eAAMC,aAAN,CAAoB,KAApB,EAA2B;AAAEP,MAAAA,MAAM,EAANA;AAAF,KAA3B,CAAhB;;AACA,QAAMQ,SAAS,GAAG,qBAAQH,OAAR,CAAlB;AAEAH,IAAAA,MAAM,CAAC,gCAAaM,SAAb,EAAwBR,MAAxB,CAAD,CAAN,CAAwCS,YAAxC,CAAqD,CAArD;AACH,GANC,CAAF;AAQAX,EAAAA,EAAE,CAAC,0DAAD,EAA6D,YAAM;AACjE,QAAMO,OAAO,GAAGC,eAAMC,aAAN,CAAoB,KAApB,EAA2B;AAAEP,MAAAA,MAAM,EAAE;AAAV,KAA3B,CAAhB;;AACA,QAAMQ,SAAS,GAAG,qBAAQH,OAAR,CAAlB;AAEAH,IAAAA,MAAM,CAAC,gCAAaM,SAAb,EAAwB,eAAxB,CAAD,CAAN,CAAiDC,YAAjD,CAA8D,CAA9D;AACH,GALC,CAAF;AAMH,CAfO,CAAR","sourcesContent":["import React from 'react';\nimport { shallow } from 'enzyme';\n\nimport { setTestID, findByTestID } from '../TestingUtils';\n\ndescribe('SetTestID', () => {\n    it('returns proper data if __DEV__ env is set', () => {\n        // @ts-ignore\n        __DEV__ = true;\n        const testID = 'someTestId';\n\n        const result = setTestID(testID);\n        expect(result).toBe(testID);\n\n    });\n\n    it('returns undefined if not __DEV__ env is set', () => {\n        // @ts-ignore\n        __DEV__ = false;\n\n        const testID = 'anotherTestId';\n\n        const result = setTestID(testID);\n        expect(result).toBe(undefined);\n    });\n});\n\ndescribe('findByTestID', () => {\n    it('returns proper element if it was found in wrapper', () => {\n        const testID = 'someTestId';\n        const Wrapper = React.createElement('div', { testID });\n        const component = shallow(Wrapper);\n\n        expect(findByTestID(component, testID)).toHaveLength(1);\n    });\n\n    it('returns empty object if element was not found in wrapper', () => {\n        const Wrapper = React.createElement('div', { testID: 'someTestId' });\n        const component = shallow(Wrapper);\n\n        expect(findByTestID(component, 'anotherTestId')).toHaveLength(0);\n    });\n});"]}