3a671a178e0ecf0c8e0727a466fd093d
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var DeprecatedColorPropType = require('DeprecatedColorPropType');

var ReactPropTypes = require('prop-types');

var DeprecatedViewStylePropTypes = require('DeprecatedViewStylePropTypes');

var TextStylePropTypes = (0, _objectSpread2.default)({}, DeprecatedViewStylePropTypes, {
  color: DeprecatedColorPropType,
  fontFamily: ReactPropTypes.string,
  fontSize: ReactPropTypes.number,
  fontStyle: ReactPropTypes.oneOf(['normal', 'italic']),
  fontWeight: ReactPropTypes.oneOf(['normal', 'bold', '100', '200', '300', '400', '500', '600', '700', '800', '900']),
  fontVariant: ReactPropTypes.arrayOf(ReactPropTypes.oneOf(['small-caps', 'oldstyle-nums', 'lining-nums', 'tabular-nums', 'proportional-nums'])),
  textShadowOffset: ReactPropTypes.shape({
    width: ReactPropTypes.number,
    height: ReactPropTypes.number
  }),
  textShadowRadius: ReactPropTypes.number,
  textShadowColor: DeprecatedColorPropType,
  letterSpacing: ReactPropTypes.number,
  lineHeight: ReactPropTypes.number,
  textAlign: ReactPropTypes.oneOf(['auto', 'left', 'right', 'center', 'justify']),
  textAlignVertical: ReactPropTypes.oneOf(['auto', 'top', 'bottom', 'center']),
  includeFontPadding: ReactPropTypes.bool,
  textDecorationLine: ReactPropTypes.oneOf(['none', 'underline', 'line-through', 'underline line-through']),
  textDecorationStyle: ReactPropTypes.oneOf(['solid', 'double', 'dotted', 'dashed']),
  textDecorationColor: DeprecatedColorPropType,
  textTransform: ReactPropTypes.oneOf(['none', 'capitalize', 'uppercase', 'lowercase']),
  writingDirection: ReactPropTypes.oneOf(['auto', 'ltr', 'rtl'])
});
module.exports = TextStylePropTypes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlRleHRTdHlsZVByb3BUeXBlcy5qcyJdLCJuYW1lcyI6WyJEZXByZWNhdGVkQ29sb3JQcm9wVHlwZSIsInJlcXVpcmUiLCJSZWFjdFByb3BUeXBlcyIsIkRlcHJlY2F0ZWRWaWV3U3R5bGVQcm9wVHlwZXMiLCJUZXh0U3R5bGVQcm9wVHlwZXMiLCJjb2xvciIsImZvbnRGYW1pbHkiLCJzdHJpbmciLCJmb250U2l6ZSIsIm51bWJlciIsImZvbnRTdHlsZSIsIm9uZU9mIiwiZm9udFdlaWdodCIsImZvbnRWYXJpYW50IiwiYXJyYXlPZiIsInRleHRTaGFkb3dPZmZzZXQiLCJzaGFwZSIsIndpZHRoIiwiaGVpZ2h0IiwidGV4dFNoYWRvd1JhZGl1cyIsInRleHRTaGFkb3dDb2xvciIsImxldHRlclNwYWNpbmciLCJsaW5lSGVpZ2h0IiwidGV4dEFsaWduIiwidGV4dEFsaWduVmVydGljYWwiLCJpbmNsdWRlRm9udFBhZGRpbmciLCJib29sIiwidGV4dERlY29yYXRpb25MaW5lIiwidGV4dERlY29yYXRpb25TdHlsZSIsInRleHREZWNvcmF0aW9uQ29sb3IiLCJ0ZXh0VHJhbnNmb3JtIiwid3JpdGluZ0RpcmVjdGlvbiIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQVVBOzs7Ozs7QUFFQSxJQUFNQSx1QkFBdUIsR0FBR0MsT0FBTyxDQUFDLHlCQUFELENBQXZDOztBQUNBLElBQU1DLGNBQWMsR0FBR0QsT0FBTyxDQUFDLFlBQUQsQ0FBOUI7O0FBQ0EsSUFBTUUsNEJBQTRCLEdBQUdGLE9BQU8sQ0FBQyw4QkFBRCxDQUE1Qzs7QUFFQSxJQUFNRyxrQkFBa0IsbUNBQ25CRCw0QkFEbUI7QUFHdEJFLEVBQUFBLEtBQUssRUFBRUwsdUJBSGU7QUFJdEJNLEVBQUFBLFVBQVUsRUFBRUosY0FBYyxDQUFDSyxNQUpMO0FBS3RCQyxFQUFBQSxRQUFRLEVBQUVOLGNBQWMsQ0FBQ08sTUFMSDtBQU10QkMsRUFBQUEsU0FBUyxFQUFFUixjQUFjLENBQUNTLEtBQWYsQ0FBcUIsQ0FBQyxRQUFELEVBQVcsUUFBWCxDQUFyQixDQU5XO0FBWXRCQyxFQUFBQSxVQUFVLEVBQUVWLGNBQWMsQ0FBQ1MsS0FBZixDQUFxQixDQUMvQixRQUQrQixFQUUvQixNQUYrQixFQUcvQixLQUgrQixFQUkvQixLQUorQixFQUsvQixLQUwrQixFQU0vQixLQU4rQixFQU8vQixLQVArQixFQVEvQixLQVIrQixFQVMvQixLQVQrQixFQVUvQixLQVYrQixFQVcvQixLQVgrQixDQUFyQixDQVpVO0FBNEJ0QkUsRUFBQUEsV0FBVyxFQUFFWCxjQUFjLENBQUNZLE9BQWYsQ0FDWFosY0FBYyxDQUFDUyxLQUFmLENBQXFCLENBQ25CLFlBRG1CLEVBRW5CLGVBRm1CLEVBR25CLGFBSG1CLEVBSW5CLGNBSm1CLEVBS25CLG1CQUxtQixDQUFyQixDQURXLENBNUJTO0FBcUN0QkksRUFBQUEsZ0JBQWdCLEVBQUViLGNBQWMsQ0FBQ2MsS0FBZixDQUFxQjtBQUNyQ0MsSUFBQUEsS0FBSyxFQUFFZixjQUFjLENBQUNPLE1BRGU7QUFFckNTLElBQUFBLE1BQU0sRUFBRWhCLGNBQWMsQ0FBQ087QUFGYyxHQUFyQixDQXJDSTtBQXlDdEJVLEVBQUFBLGdCQUFnQixFQUFFakIsY0FBYyxDQUFDTyxNQXpDWDtBQTBDdEJXLEVBQUFBLGVBQWUsRUFBRXBCLHVCQTFDSztBQThDdEJxQixFQUFBQSxhQUFhLEVBQUVuQixjQUFjLENBQUNPLE1BOUNSO0FBK0N0QmEsRUFBQUEsVUFBVSxFQUFFcEIsY0FBYyxDQUFDTyxNQS9DTDtBQW9EdEJjLEVBQUFBLFNBQVMsRUFBRXJCLGNBQWMsQ0FBQ1MsS0FBZixDQUFxQixDQUM5QixNQUQ4QixFQUU5QixNQUY4QixFQUc5QixPQUg4QixFQUk5QixRQUo4QixFQUs5QixTQUw4QixDQUFyQixDQXBEVztBQThEdEJhLEVBQUFBLGlCQUFpQixFQUFFdEIsY0FBYyxDQUFDUyxLQUFmLENBQXFCLENBQ3RDLE1BRHNDLEVBRXRDLEtBRnNDLEVBR3RDLFFBSHNDLEVBSXRDLFFBSnNDLENBQXJCLENBOURHO0FBMEV0QmMsRUFBQUEsa0JBQWtCLEVBQUV2QixjQUFjLENBQUN3QixJQTFFYjtBQTJFdEJDLEVBQUFBLGtCQUFrQixFQUFFekIsY0FBYyxDQUFDUyxLQUFmLENBQXFCLENBQ3ZDLE1BRHVDLEVBRXZDLFdBRnVDLEVBR3ZDLGNBSHVDLEVBSXZDLHdCQUp1QyxDQUFyQixDQTNFRTtBQW9GdEJpQixFQUFBQSxtQkFBbUIsRUFBRTFCLGNBQWMsQ0FBQ1MsS0FBZixDQUFxQixDQUN4QyxPQUR3QyxFQUV4QyxRQUZ3QyxFQUd4QyxRQUh3QyxFQUl4QyxRQUp3QyxDQUFyQixDQXBGQztBQTZGdEJrQixFQUFBQSxtQkFBbUIsRUFBRTdCLHVCQTdGQztBQThGdEI4QixFQUFBQSxhQUFhLEVBQUU1QixjQUFjLENBQUNTLEtBQWYsQ0FBcUIsQ0FDbEMsTUFEa0MsRUFFbEMsWUFGa0MsRUFHbEMsV0FIa0MsRUFJbEMsV0FKa0MsQ0FBckIsQ0E5Rk87QUF1R3RCb0IsRUFBQUEsZ0JBQWdCLEVBQUU3QixjQUFjLENBQUNTLEtBQWYsQ0FBcUIsQ0FBQyxNQUFELEVBQXFCLEtBQXJCLEVBQTRCLEtBQTVCLENBQXJCO0FBdkdJLEVBQXhCO0FBMEdBcUIsTUFBTSxDQUFDQyxPQUFQLEdBQWlCN0Isa0JBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBAZmxvd1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgRGVwcmVjYXRlZENvbG9yUHJvcFR5cGUgPSByZXF1aXJlKCdEZXByZWNhdGVkQ29sb3JQcm9wVHlwZScpO1xuY29uc3QgUmVhY3RQcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5jb25zdCBEZXByZWNhdGVkVmlld1N0eWxlUHJvcFR5cGVzID0gcmVxdWlyZSgnRGVwcmVjYXRlZFZpZXdTdHlsZVByb3BUeXBlcycpO1xuXG5jb25zdCBUZXh0U3R5bGVQcm9wVHlwZXMgPSB7XG4gIC4uLkRlcHJlY2F0ZWRWaWV3U3R5bGVQcm9wVHlwZXMsXG5cbiAgY29sb3I6IERlcHJlY2F0ZWRDb2xvclByb3BUeXBlLFxuICBmb250RmFtaWx5OiBSZWFjdFByb3BUeXBlcy5zdHJpbmcsXG4gIGZvbnRTaXplOiBSZWFjdFByb3BUeXBlcy5udW1iZXIsXG4gIGZvbnRTdHlsZTogUmVhY3RQcm9wVHlwZXMub25lT2YoWydub3JtYWwnLCAnaXRhbGljJ10pLFxuICAvKipcbiAgICogU3BlY2lmaWVzIGZvbnQgd2VpZ2h0LiBUaGUgdmFsdWVzICdub3JtYWwnIGFuZCAnYm9sZCcgYXJlIHN1cHBvcnRlZCBmb3JcbiAgICogbW9zdCBmb250cy4gTm90IGFsbCBmb250cyBoYXZlIGEgdmFyaWFudCBmb3IgZWFjaCBvZiB0aGUgbnVtZXJpYyB2YWx1ZXMsXG4gICAqIGluIHRoYXQgY2FzZSB0aGUgY2xvc2VzdCBvbmUgaXMgY2hvc2VuLlxuICAgKi9cbiAgZm9udFdlaWdodDogUmVhY3RQcm9wVHlwZXMub25lT2YoW1xuICAgICdub3JtYWwnIC8qZGVmYXVsdCovLFxuICAgICdib2xkJyxcbiAgICAnMTAwJyxcbiAgICAnMjAwJyxcbiAgICAnMzAwJyxcbiAgICAnNDAwJyxcbiAgICAnNTAwJyxcbiAgICAnNjAwJyxcbiAgICAnNzAwJyxcbiAgICAnODAwJyxcbiAgICAnOTAwJyxcbiAgXSksXG4gIC8qKlxuICAgKiBAcGxhdGZvcm0gaW9zXG4gICAqL1xuICBmb250VmFyaWFudDogUmVhY3RQcm9wVHlwZXMuYXJyYXlPZihcbiAgICBSZWFjdFByb3BUeXBlcy5vbmVPZihbXG4gICAgICAnc21hbGwtY2FwcycsXG4gICAgICAnb2xkc3R5bGUtbnVtcycsXG4gICAgICAnbGluaW5nLW51bXMnLFxuICAgICAgJ3RhYnVsYXItbnVtcycsXG4gICAgICAncHJvcG9ydGlvbmFsLW51bXMnLFxuICAgIF0pLFxuICApLFxuICB0ZXh0U2hhZG93T2Zmc2V0OiBSZWFjdFByb3BUeXBlcy5zaGFwZSh7XG4gICAgd2lkdGg6IFJlYWN0UHJvcFR5cGVzLm51bWJlcixcbiAgICBoZWlnaHQ6IFJlYWN0UHJvcFR5cGVzLm51bWJlcixcbiAgfSksXG4gIHRleHRTaGFkb3dSYWRpdXM6IFJlYWN0UHJvcFR5cGVzLm51bWJlcixcbiAgdGV4dFNoYWRvd0NvbG9yOiBEZXByZWNhdGVkQ29sb3JQcm9wVHlwZSxcbiAgLyoqXG4gICAqIEBwbGF0Zm9ybSBpb3NcbiAgICovXG4gIGxldHRlclNwYWNpbmc6IFJlYWN0UHJvcFR5cGVzLm51bWJlcixcbiAgbGluZUhlaWdodDogUmVhY3RQcm9wVHlwZXMubnVtYmVyLFxuICAvKipcbiAgICogU3BlY2lmaWVzIHRleHQgYWxpZ25tZW50LiBUaGUgdmFsdWUgJ2p1c3RpZnknIGlzIG9ubHkgc3VwcG9ydGVkIG9uIGlPUyBhbmRcbiAgICogZmFsbGJhY2tzIHRvIGBsZWZ0YCBvbiBBbmRyb2lkLlxuICAgKi9cbiAgdGV4dEFsaWduOiBSZWFjdFByb3BUeXBlcy5vbmVPZihbXG4gICAgJ2F1dG8nIC8qZGVmYXVsdCovLFxuICAgICdsZWZ0JyxcbiAgICAncmlnaHQnLFxuICAgICdjZW50ZXInLFxuICAgICdqdXN0aWZ5JyxcbiAgXSksXG4gIC8qKlxuICAgKiBAcGxhdGZvcm0gYW5kcm9pZFxuICAgKi9cbiAgdGV4dEFsaWduVmVydGljYWw6IFJlYWN0UHJvcFR5cGVzLm9uZU9mKFtcbiAgICAnYXV0bycgLypkZWZhdWx0Ki8sXG4gICAgJ3RvcCcsXG4gICAgJ2JvdHRvbScsXG4gICAgJ2NlbnRlcicsXG4gIF0pLFxuICAvKipcbiAgICogU2V0IHRvIGBmYWxzZWAgdG8gcmVtb3ZlIGV4dHJhIGZvbnQgcGFkZGluZyBpbnRlbmRlZCB0byBtYWtlIHNwYWNlIGZvciBjZXJ0YWluIGFzY2VuZGVycyAvIGRlc2NlbmRlcnMuXG4gICAqIFdpdGggc29tZSBmb250cywgdGhpcyBwYWRkaW5nIGNhbiBtYWtlIHRleHQgbG9vayBzbGlnaHRseSBtaXNhbGlnbmVkIHdoZW4gY2VudGVyZWQgdmVydGljYWxseS5cbiAgICogRm9yIGJlc3QgcmVzdWx0cyBhbHNvIHNldCBgdGV4dEFsaWduVmVydGljYWxgIHRvIGBjZW50ZXJgLiBEZWZhdWx0IGlzIHRydWUuXG4gICAqIEBwbGF0Zm9ybSBhbmRyb2lkXG4gICAqL1xuICBpbmNsdWRlRm9udFBhZGRpbmc6IFJlYWN0UHJvcFR5cGVzLmJvb2wsXG4gIHRleHREZWNvcmF0aW9uTGluZTogUmVhY3RQcm9wVHlwZXMub25lT2YoW1xuICAgICdub25lJyAvKmRlZmF1bHQqLyxcbiAgICAndW5kZXJsaW5lJyxcbiAgICAnbGluZS10aHJvdWdoJyxcbiAgICAndW5kZXJsaW5lIGxpbmUtdGhyb3VnaCcsXG4gIF0pLFxuICAvKipcbiAgICogQHBsYXRmb3JtIGlvc1xuICAgKi9cbiAgdGV4dERlY29yYXRpb25TdHlsZTogUmVhY3RQcm9wVHlwZXMub25lT2YoW1xuICAgICdzb2xpZCcgLypkZWZhdWx0Ki8sXG4gICAgJ2RvdWJsZScsXG4gICAgJ2RvdHRlZCcsXG4gICAgJ2Rhc2hlZCcsXG4gIF0pLFxuICAvKipcbiAgICogQHBsYXRmb3JtIGlvc1xuICAgKi9cbiAgdGV4dERlY29yYXRpb25Db2xvcjogRGVwcmVjYXRlZENvbG9yUHJvcFR5cGUsXG4gIHRleHRUcmFuc2Zvcm06IFJlYWN0UHJvcFR5cGVzLm9uZU9mKFtcbiAgICAnbm9uZScgLypkZWZhdWx0Ki8sXG4gICAgJ2NhcGl0YWxpemUnLFxuICAgICd1cHBlcmNhc2UnLFxuICAgICdsb3dlcmNhc2UnLFxuICBdKSxcbiAgLyoqXG4gICAqIEBwbGF0Zm9ybSBpb3NcbiAgICovXG4gIHdyaXRpbmdEaXJlY3Rpb246IFJlYWN0UHJvcFR5cGVzLm9uZU9mKFsnYXV0bycgLypkZWZhdWx0Ki8sICdsdHInLCAncnRsJ10pLFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBUZXh0U3R5bGVQcm9wVHlwZXM7XG4iXX0=