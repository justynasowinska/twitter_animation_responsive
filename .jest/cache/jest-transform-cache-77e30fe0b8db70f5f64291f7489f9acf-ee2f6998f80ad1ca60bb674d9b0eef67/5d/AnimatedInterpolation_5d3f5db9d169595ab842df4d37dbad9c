86d1dce6cb57f542cefe6686393703f6
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var AnimatedNode = require('./AnimatedNode');

var AnimatedWithChildren = require('./AnimatedWithChildren');

var NativeAnimatedHelper = require('../NativeAnimatedHelper');

var invariant = require('invariant');

var normalizeColor = require('normalizeColor');

var linear = function linear(t) {
  return t;
};

function createInterpolation(config) {
  if (config.outputRange && typeof config.outputRange[0] === 'string') {
    return createInterpolationFromStringOutputRange(config);
  }

  var outputRange = config.outputRange;
  checkInfiniteRange('outputRange', outputRange);
  var inputRange = config.inputRange;
  checkInfiniteRange('inputRange', inputRange);
  checkValidInputRange(inputRange);
  invariant(inputRange.length === outputRange.length, 'inputRange (' + inputRange.length + ') and outputRange (' + outputRange.length + ') must have the same length');
  var easing = config.easing || linear;
  var extrapolateLeft = 'extend';

  if (config.extrapolateLeft !== undefined) {
    extrapolateLeft = config.extrapolateLeft;
  } else if (config.extrapolate !== undefined) {
    extrapolateLeft = config.extrapolate;
  }

  var extrapolateRight = 'extend';

  if (config.extrapolateRight !== undefined) {
    extrapolateRight = config.extrapolateRight;
  } else if (config.extrapolate !== undefined) {
    extrapolateRight = config.extrapolate;
  }

  return function (input) {
    invariant(typeof input === 'number', 'Cannot interpolation an input which is not a number');
    var range = findRange(input, inputRange);
    return interpolate(input, inputRange[range], inputRange[range + 1], outputRange[range], outputRange[range + 1], easing, extrapolateLeft, extrapolateRight);
  };
}

function interpolate(input, inputMin, inputMax, outputMin, outputMax, easing, extrapolateLeft, extrapolateRight) {
  var result = input;

  if (result < inputMin) {
    if (extrapolateLeft === 'identity') {
      return result;
    } else if (extrapolateLeft === 'clamp') {
      result = inputMin;
    } else if (extrapolateLeft === 'extend') {}
  }

  if (result > inputMax) {
    if (extrapolateRight === 'identity') {
      return result;
    } else if (extrapolateRight === 'clamp') {
      result = inputMax;
    } else if (extrapolateRight === 'extend') {}
  }

  if (outputMin === outputMax) {
    return outputMin;
  }

  if (inputMin === inputMax) {
    if (input <= inputMin) {
      return outputMin;
    }

    return outputMax;
  }

  if (inputMin === -Infinity) {
    result = -result;
  } else if (inputMax === Infinity) {
    result = result - inputMin;
  } else {
    result = (result - inputMin) / (inputMax - inputMin);
  }

  result = easing(result);

  if (outputMin === -Infinity) {
    result = -result;
  } else if (outputMax === Infinity) {
    result = result + outputMin;
  } else {
    result = result * (outputMax - outputMin) + outputMin;
  }

  return result;
}

function colorToRgba(input) {
  var int32Color = normalizeColor(input);

  if (int32Color === null) {
    return input;
  }

  int32Color = int32Color || 0;
  var r = (int32Color & 0xff000000) >>> 24;
  var g = (int32Color & 0x00ff0000) >>> 16;
  var b = (int32Color & 0x0000ff00) >>> 8;
  var a = (int32Color & 0x000000ff) / 255;
  return "rgba(" + r + ", " + g + ", " + b + ", " + a + ")";
}

var stringShapeRegex = /[0-9\.-]+/g;

function createInterpolationFromStringOutputRange(config) {
  var outputRange = config.outputRange;
  invariant(outputRange.length >= 2, 'Bad output range');
  outputRange = outputRange.map(colorToRgba);
  checkPattern(outputRange);
  var outputRanges = outputRange[0].match(stringShapeRegex).map(function () {
    return [];
  });
  outputRange.forEach(function (value) {
    value.match(stringShapeRegex).forEach(function (number, i) {
      outputRanges[i].push(+number);
    });
  });
  var interpolations = outputRange[0].match(stringShapeRegex).map(function (value, i) {
    return createInterpolation((0, _objectSpread2.default)({}, config, {
      outputRange: outputRanges[i]
    }));
  });
  var shouldRound = isRgbOrRgba(outputRange[0]);
  return function (input) {
    var i = 0;
    return outputRange[0].replace(stringShapeRegex, function () {
      var val = +interpolations[i++](input);
      var rounded = shouldRound && i < 4 ? Math.round(val) : Math.round(val * 1000) / 1000;
      return String(rounded);
    });
  };
}

function isRgbOrRgba(range) {
  return typeof range === 'string' && range.startsWith('rgb');
}

function checkPattern(arr) {
  var pattern = arr[0].replace(stringShapeRegex, '');

  for (var i = 1; i < arr.length; ++i) {
    invariant(pattern === arr[i].replace(stringShapeRegex, ''), 'invalid pattern ' + arr[0] + ' and ' + arr[i]);
  }
}

function findRange(input, inputRange) {
  var i;

  for (i = 1; i < inputRange.length - 1; ++i) {
    if (inputRange[i] >= input) {
      break;
    }
  }

  return i - 1;
}

function checkValidInputRange(arr) {
  invariant(arr.length >= 2, 'inputRange must have at least 2 elements');

  for (var i = 1; i < arr.length; ++i) {
    invariant(arr[i] >= arr[i - 1], 'inputRange must be monotonically non-decreasing ' + arr);
  }
}

function checkInfiniteRange(name, arr) {
  invariant(arr.length >= 2, name + ' must have at least 2 elements');
  invariant(arr.length !== 2 || arr[0] !== -Infinity || arr[1] !== Infinity, name + 'cannot be ]-infinity;+infinity[ ' + arr);
}

var AnimatedInterpolation = function (_AnimatedWithChildren) {
  (0, _inherits2.default)(AnimatedInterpolation, _AnimatedWithChildren);

  function AnimatedInterpolation(parent, config) {
    var _this;

    (0, _classCallCheck2.default)(this, AnimatedInterpolation);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(AnimatedInterpolation).call(this));
    _this._parent = parent;
    _this._config = config;
    _this._interpolation = createInterpolation(config);
    return _this;
  }

  (0, _createClass2.default)(AnimatedInterpolation, [{
    key: "__makeNative",
    value: function __makeNative() {
      this._parent.__makeNative();

      (0, _get2.default)((0, _getPrototypeOf2.default)(AnimatedInterpolation.prototype), "__makeNative", this).call(this);
    }
  }, {
    key: "__getValue",
    value: function __getValue() {
      var parentValue = this._parent.__getValue();

      invariant(typeof parentValue === 'number', 'Cannot interpolate an input which is not a number.');
      return this._interpolation(parentValue);
    }
  }, {
    key: "interpolate",
    value: function interpolate(config) {
      return new AnimatedInterpolation(this, config);
    }
  }, {
    key: "__attach",
    value: function __attach() {
      this._parent.__addChild(this);
    }
  }, {
    key: "__detach",
    value: function __detach() {
      this._parent.__removeChild(this);

      (0, _get2.default)((0, _getPrototypeOf2.default)(AnimatedInterpolation.prototype), "__detach", this).call(this);
    }
  }, {
    key: "__transformDataType",
    value: function __transformDataType(range) {
      return range.map(NativeAnimatedHelper.transformDataType);
    }
  }, {
    key: "__getNativeConfig",
    value: function __getNativeConfig() {
      if (__DEV__) {
        NativeAnimatedHelper.validateInterpolation(this._config);
      }

      return {
        inputRange: this._config.inputRange,
        outputRange: this.__transformDataType(this._config.outputRange),
        extrapolateLeft: this._config.extrapolateLeft || this._config.extrapolate || 'extend',
        extrapolateRight: this._config.extrapolateRight || this._config.extrapolate || 'extend',
        type: 'interpolation'
      };
    }
  }]);
  return AnimatedInterpolation;
}(AnimatedWithChildren);

AnimatedInterpolation.__createInterpolation = createInterpolation;
module.exports = AnimatedInterpolation;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkFuaW1hdGVkSW50ZXJwb2xhdGlvbi5qcyJdLCJuYW1lcyI6WyJBbmltYXRlZE5vZGUiLCJyZXF1aXJlIiwiQW5pbWF0ZWRXaXRoQ2hpbGRyZW4iLCJOYXRpdmVBbmltYXRlZEhlbHBlciIsImludmFyaWFudCIsIm5vcm1hbGl6ZUNvbG9yIiwibGluZWFyIiwidCIsImNyZWF0ZUludGVycG9sYXRpb24iLCJjb25maWciLCJvdXRwdXRSYW5nZSIsImNyZWF0ZUludGVycG9sYXRpb25Gcm9tU3RyaW5nT3V0cHV0UmFuZ2UiLCJjaGVja0luZmluaXRlUmFuZ2UiLCJpbnB1dFJhbmdlIiwiY2hlY2tWYWxpZElucHV0UmFuZ2UiLCJsZW5ndGgiLCJlYXNpbmciLCJleHRyYXBvbGF0ZUxlZnQiLCJ1bmRlZmluZWQiLCJleHRyYXBvbGF0ZSIsImV4dHJhcG9sYXRlUmlnaHQiLCJpbnB1dCIsInJhbmdlIiwiZmluZFJhbmdlIiwiaW50ZXJwb2xhdGUiLCJpbnB1dE1pbiIsImlucHV0TWF4Iiwib3V0cHV0TWluIiwib3V0cHV0TWF4IiwicmVzdWx0IiwiSW5maW5pdHkiLCJjb2xvclRvUmdiYSIsImludDMyQ29sb3IiLCJyIiwiZyIsImIiLCJhIiwic3RyaW5nU2hhcGVSZWdleCIsIm1hcCIsImNoZWNrUGF0dGVybiIsIm91dHB1dFJhbmdlcyIsIm1hdGNoIiwiZm9yRWFjaCIsInZhbHVlIiwibnVtYmVyIiwiaSIsInB1c2giLCJpbnRlcnBvbGF0aW9ucyIsInNob3VsZFJvdW5kIiwiaXNSZ2JPclJnYmEiLCJyZXBsYWNlIiwidmFsIiwicm91bmRlZCIsIk1hdGgiLCJyb3VuZCIsIlN0cmluZyIsInN0YXJ0c1dpdGgiLCJhcnIiLCJwYXR0ZXJuIiwibmFtZSIsIkFuaW1hdGVkSW50ZXJwb2xhdGlvbiIsInBhcmVudCIsIl9wYXJlbnQiLCJfY29uZmlnIiwiX2ludGVycG9sYXRpb24iLCJfX21ha2VOYXRpdmUiLCJwYXJlbnRWYWx1ZSIsIl9fZ2V0VmFsdWUiLCJfX2FkZENoaWxkIiwiX19yZW1vdmVDaGlsZCIsInRyYW5zZm9ybURhdGFUeXBlIiwiX19ERVZfXyIsInZhbGlkYXRlSW50ZXJwb2xhdGlvbiIsIl9fdHJhbnNmb3JtRGF0YVR5cGUiLCJ0eXBlIiwiX19jcmVhdGVJbnRlcnBvbGF0aW9uIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBVUE7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUVBLElBQU1BLFlBQVksR0FBR0MsT0FBTyxDQUFDLGdCQUFELENBQTVCOztBQUNBLElBQU1DLG9CQUFvQixHQUFHRCxPQUFPLENBQUMsd0JBQUQsQ0FBcEM7O0FBQ0EsSUFBTUUsb0JBQW9CLEdBQUdGLE9BQU8sQ0FBQyx5QkFBRCxDQUFwQzs7QUFFQSxJQUFNRyxTQUFTLEdBQUdILE9BQU8sQ0FBQyxXQUFELENBQXpCOztBQUNBLElBQU1JLGNBQWMsR0FBR0osT0FBTyxDQUFDLGdCQUFELENBQTlCOztBQWlCQSxJQUFNSyxNQUFNLEdBQUcsU0FBVEEsTUFBUyxDQUFBQyxDQUFDO0FBQUEsU0FBSUEsQ0FBSjtBQUFBLENBQWhCOztBQU1BLFNBQVNDLG1CQUFULENBQ0VDLE1BREYsRUFFc0M7QUFDcEMsTUFBSUEsTUFBTSxDQUFDQyxXQUFQLElBQXNCLE9BQU9ELE1BQU0sQ0FBQ0MsV0FBUCxDQUFtQixDQUFuQixDQUFQLEtBQWlDLFFBQTNELEVBQXFFO0FBQ25FLFdBQU9DLHdDQUF3QyxDQUFDRixNQUFELENBQS9DO0FBQ0Q7O0FBRUQsTUFBTUMsV0FBMEIsR0FBSUQsTUFBTSxDQUFDQyxXQUEzQztBQUNBRSxFQUFBQSxrQkFBa0IsQ0FBQyxhQUFELEVBQWdCRixXQUFoQixDQUFsQjtBQUVBLE1BQU1HLFVBQVUsR0FBR0osTUFBTSxDQUFDSSxVQUExQjtBQUNBRCxFQUFBQSxrQkFBa0IsQ0FBQyxZQUFELEVBQWVDLFVBQWYsQ0FBbEI7QUFDQUMsRUFBQUEsb0JBQW9CLENBQUNELFVBQUQsQ0FBcEI7QUFFQVQsRUFBQUEsU0FBUyxDQUNQUyxVQUFVLENBQUNFLE1BQVgs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SytELG1CQUFMLENBQXlCLEtBQUtWLE9BQUwsQ0FBYXJELFdBQXRDLENBSFI7QUFJTE8sUUFBQUEsZUFBZSxFQUNiLEtBQUs4QyxPQUFMLENBQWE5QyxlQUFiLElBQWdDLEtBQUs4QyxPQUFMLENBQWE1QyxXQUE3QyxJQUE0RCxRQUx6RDtBQU1MQyxRQUFBQSxnQkFBZ0IsRUFDZCxLQUFLMkMsT0FBTCxDQUFhM0MsZ0JBQWIsSUFBaUMsS0FBSzJDLE9BQUwsQ0FBYTVDLFdBQTlDLElBQTZELFFBUDFEO0FBUUx1RCxRQUFBQSxJQUFJLEVBQUU7QUFSRCxPQUFQO0FBVUQ7OztFQTdEaUN4RSxvQjs7QUFBOUIwRCxxQixDQUVHZSxxQixHQUF3Qm5FLG1CO0FBOERqQ29FLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQmpCLHFCQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3dcbiAqIEBmb3JtYXRcbiAqL1xuLyogZXNsaW50IG5vLWJpdHdpc2U6IDAgKi9cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgQW5pbWF0ZWROb2RlID0gcmVxdWlyZSgnLi9BbmltYXRlZE5vZGUnKTtcbmNvbnN0IEFuaW1hdGVkV2l0aENoaWxkcmVuID0gcmVxdWlyZSgnLi9BbmltYXRlZFdpdGhDaGlsZHJlbicpO1xuY29uc3QgTmF0aXZlQW5pbWF0ZWRIZWxwZXIgPSByZXF1aXJlKCcuLi9OYXRpdmVBbmltYXRlZEhlbHBlcicpO1xuXG5jb25zdCBpbnZhcmlhbnQgPSByZXF1aXJlKCdpbnZhcmlhbnQnKTtcbmNvbnN0IG5vcm1hbGl6ZUNvbG9yID0gcmVxdWlyZSgnbm9ybWFsaXplQ29sb3InKTtcblxudHlwZSBFeHRyYXBvbGF0ZVR5cGUgPSAnZXh0ZW5kJyB8ICdpZGVudGl0eScgfCAnY2xhbXAnO1xuXG5leHBvcnQgdHlwZSBJbnRlcnBvbGF0aW9uQ29uZmlnVHlwZSA9IHtcbiAgaW5wdXRSYW5nZTogQXJyYXk8bnVtYmVyPixcbiAgLyogJEZsb3dGaXhNZSg+PTAuMzguMCBzaXRlPXJlYWN0X25hdGl2ZV9mYixyZWFjdF9uYXRpdmVfb3NzKSAtIEZsb3cgZXJyb3JcbiAgICogZGV0ZWN0ZWQgZHVyaW5nIHRoZSBkZXBsb3ltZW50IG9mIHYwLjM4LjAuIFRvIHNlZSB0aGUgZXJyb3IsIHJlbW92ZSB0aGlzXG4gICAqIGNvbW1lbnQgYW5kIHJ1biBmbG93XG4gICAqL1xuICBvdXRwdXRSYW5nZTogQXJyYXk8bnVtYmVyPiB8IEFycmF5PHN0cmluZz4sXG4gIGVhc2luZz86IChpbnB1dDogbnVtYmVyKSA9PiBudW1iZXIsXG4gIGV4dHJhcG9sYXRlPzogRXh0cmFwb2xhdGVUeXBlLFxuICBleHRyYXBvbGF0ZUxlZnQ/OiBFeHRyYXBvbGF0ZVR5cGUsXG4gIGV4dHJhcG9sYXRlUmlnaHQ/OiBFeHRyYXBvbGF0ZVR5cGUsXG59O1xuXG5jb25zdCBsaW5lYXIgPSB0ID0+IHQ7XG5cbi8qKlxuICogVmVyeSBoYW5keSBoZWxwZXIgdG8gbWFwIGlucHV0IHJhbmdlcyB0byBvdXRwdXQgcmFuZ2VzIHdpdGggYW4gZWFzaW5nXG4gKiBmdW5jdGlvbiBhbmQgY3VzdG9tIGJlaGF2aW9yIG91dHNpZGUgb2YgdGhlIHJhbmdlcy5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW50ZXJwb2xhdGlvbihcbiAgY29uZmlnOiBJbnRlcnBvbGF0aW9uQ29uZmlnVHlwZSxcbik6IChpbnB1dDogbnVtYmVyKSA9PiBudW1iZXIgfCBzdHJpbmcge1xuICBpZiAoY29uZmlnLm91dHB1dFJhbmdlICYmIHR5cGVvZiBjb25maWcub3V0cHV0UmFuZ2VbMF0gPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUludGVycG9sYXRpb25Gcm9tU3RyaW5nT3V0cHV0UmFuZ2UoY29uZmlnKTtcbiAgfVxuXG4gIGNvbnN0IG91dHB1dFJhbmdlOiBBcnJheTxudW1iZXI+ID0gKGNvbmZpZy5vdXRwdXRSYW5nZTogYW55KTtcbiAgY2hlY2tJbmZpbml0ZVJhbmdlKCdvdXRwdXRSYW5nZScsIG91dHB1dFJhbmdlKTtcblxuICBjb25zdCBpbnB1dFJhbmdlID0gY29uZmlnLmlucHV0UmFuZ2U7XG4gIGNoZWNrSW5maW5pdGVSYW5nZSgnaW5wdXRSYW5nZScsIGlucHV0UmFuZ2UpO1xuICBjaGVja1ZhbGlkSW5wdXRSYW5nZShpbnB1dFJhbmdlKTtcblxuICBpbnZhcmlhbnQoXG4gICAgaW5wdXRSYW5nZS5sZW5ndGggPT09IG91dHB1dFJhbmdlLmxlbmd0aCxcbiAgICAnaW5wdXRSYW5nZSAoJyArXG4gICAgICBpbnB1dFJhbmdlLmxlbmd0aCArXG4gICAgICAnKSBhbmQgb3V0cHV0UmFuZ2UgKCcgK1xuICAgICAgb3V0cHV0UmFuZ2UubGVuZ3RoICtcbiAgICAgICcpIG11c3QgaGF2ZSB0aGUgc2FtZSBsZW5ndGgnLFxuICApO1xuXG4gIGNvbnN0IGVhc2luZyA9IGNvbmZpZy5lYXNpbmcgfHwgbGluZWFyO1xuXG4gIGxldCBleHRyYXBvbGF0ZUxlZnQ6IEV4dHJhcG9sYXRlVHlwZSA9ICdleHRlbmQnO1xuICBpZiAoY29uZmlnLmV4dHJhcG9sYXRlTGVmdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZXh0cmFwb2xhdGVMZWZ0ID0gY29uZmlnLmV4dHJhcG9sYXRlTGVmdDtcbiAgfSBlbHNlIGlmIChjb25maWcuZXh0cmFwb2xhdGUgIT09IHVuZGVmaW5lZCkge1xuICAgIGV4dHJhcG9sYXRlTGVmdCA9IGNvbmZpZy5leHRyYXBvbGF0ZTtcbiAgfVxuXG4gIGxldCBleHRyYXBvbGF0ZVJpZ2h0OiBFeHRyYXBvbGF0ZVR5cGUgPSAnZXh0ZW5kJztcbiAgaWYgKGNvbmZpZy5leHRyYXBvbGF0ZVJpZ2h0ICE9PSB1bmRlZmluZWQpIHtcbiAgICBleHRyYXBvbGF0ZVJpZ2h0ID0gY29uZmlnLmV4dHJhcG9sYXRlUmlnaHQ7XG4gIH0gZWxzZSBpZiAoY29uZmlnLmV4dHJhcG9sYXRlICE9PSB1bmRlZmluZWQpIHtcbiAgICBleHRyYXBvbGF0ZVJpZ2h0ID0gY29uZmlnLmV4dHJhcG9sYXRlO1xuICB9XG5cbiAgcmV0dXJuIGlucHV0ID0+IHtcbiAgICBpbnZhcmlhbnQoXG4gICAgICB0eXBlb2YgaW5wdXQgPT09ICdudW1iZXInLFxuICAgICAgJ0Nhbm5vdCBpbnRlcnBvbGF0aW9uIGFuIGlucHV0IHdoaWNoIGlzIG5vdCBhIG51bWJlcicsXG4gICAgKTtcblxuICAgIGNvbnN0IHJhbmdlID0gZmluZFJhbmdlKGlucHV0LCBpbnB1dFJhbmdlKTtcbiAgICByZXR1cm4gaW50ZXJwb2xhdGUoXG4gICAgICBpbnB1dCxcbiAgICAgIGlucHV0UmFuZ2VbcmFuZ2VdLFxuICAgICAgaW5wdXRSYW5nZVtyYW5nZSArIDFdLFxuICAgICAgb3V0cHV0UmFuZ2VbcmFuZ2VdLFxuICAgICAgb3V0cHV0UmFuZ2VbcmFuZ2UgKyAxXSxcbiAgICAgIGVhc2luZyxcbiAgICAgIGV4dHJhcG9sYXRlTGVmdCxcbiAgICAgIGV4dHJhcG9sYXRlUmlnaHQsXG4gICAgKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gaW50ZXJwb2xhdGUoXG4gIGlucHV0OiBudW1iZXIsXG4gIGlucHV0TWluOiBudW1iZXIsXG4gIGlucHV0TWF4OiBudW1iZXIsXG4gIG91dHB1dE1pbjogbnVtYmVyLFxuICBvdXRwdXRNYXg6IG51bWJlcixcbiAgZWFzaW5nOiAoaW5wdXQ6IG51bWJlcikgPT4gbnVtYmVyLFxuICBleHRyYXBvbGF0ZUxlZnQ6IEV4dHJhcG9sYXRlVHlwZSxcbiAgZXh0cmFwb2xhdGVSaWdodDogRXh0cmFwb2xhdGVUeXBlLFxuKSB7XG4gIGxldCByZXN1bHQgPSBpbnB1dDtcblxuICAvLyBFeHRyYXBvbGF0ZVxuICBpZiAocmVzdWx0IDwgaW5wdXRNaW4pIHtcbiAgICBpZiAoZXh0cmFwb2xhdGVMZWZ0ID09PSAnaWRlbnRpdHknKSB7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0gZWxzZSBpZiAoZXh0cmFwb2xhdGVMZWZ0ID09PSAnY2xhbXAnKSB7XG4gICAgICByZXN1bHQgPSBpbnB1dE1pbjtcbiAgICB9IGVsc2UgaWYgKGV4dHJhcG9sYXRlTGVmdCA9PT0gJ2V4dGVuZCcpIHtcbiAgICAgIC8vIG5vb3BcbiAgICB9XG4gIH1cblxuICBpZiAocmVzdWx0ID4gaW5wdXRNYXgpIHtcbiAgICBpZiAoZXh0cmFwb2xhdGVSaWdodCA9PT0gJ2lkZW50aXR5Jykge1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9IGVsc2UgaWYgKGV4dHJhcG9sYXRlUmlnaHQgPT09ICdjbGFtcCcpIHtcbiAgICAgIHJlc3VsdCA9IGlucHV0TWF4O1xuICAgIH0gZWxzZSBpZiAoZXh0cmFwb2xhdGVSaWdodCA9PT0gJ2V4dGVuZCcpIHtcbiAgICAgIC8vIG5vb3BcbiAgICB9XG4gIH1cblxuICBpZiAob3V0cHV0TWluID09PSBvdXRwdXRNYXgpIHtcbiAgICByZXR1cm4gb3V0cHV0TWluO1xuICB9XG5cbiAgaWYgKGlucHV0TWluID09PSBpbnB1dE1heCkge1xuICAgIGlmIChpbnB1dCA8PSBpbnB1dE1pbikge1xuICAgICAgcmV0dXJuIG91dHB1dE1pbjtcbiAgICB9XG4gICAgcmV0dXJuIG91dHB1dE1heDtcbiAgfVxuXG4gIC8vIElucHV0IFJhbmdlXG4gIGlmIChpbnB1dE1pbiA9PT0gLUluZmluaXR5KSB7XG4gICAgcmVzdWx0ID0gLXJlc3VsdDtcbiAgfSBlbHNlIGlmIChpbnB1dE1heCA9PT0gSW5maW5pdHkpIHtcbiAgICByZXN1bHQgPSByZXN1bHQgLSBpbnB1dE1pbjtcbiAgfSBlbHNlIHtcbiAgICByZXN1bHQgPSAocmVzdWx0IC0gaW5wdXRNaW4pIC8gKGlucHV0TWF4IC0gaW5wdXRNaW4pO1xuICB9XG5cbiAgLy8gRWFzaW5nXG4gIHJlc3VsdCA9IGVhc2luZyhyZXN1bHQpO1xuXG4gIC8vIE91dHB1dCBSYW5nZVxuICBpZiAob3V0cHV0TWluID09PSAtSW5maW5pdHkpIHtcbiAgICByZXN1bHQgPSAtcmVzdWx0O1xuICB9IGVsc2UgaWYgKG91dHB1dE1heCA9PT0gSW5maW5pdHkpIHtcbiAgICByZXN1bHQgPSByZXN1bHQgKyBvdXRwdXRNaW47XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0ID0gcmVzdWx0ICogKG91dHB1dE1heCAtIG91dHB1dE1pbikgKyBvdXRwdXRNaW47XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBjb2xvclRvUmdiYShpbnB1dDogc3RyaW5nKTogc3RyaW5nIHtcbiAgbGV0IGludDMyQ29sb3IgPSBub3JtYWxpemVDb2xvcihpbnB1dCk7XG4gIGlmIChpbnQzMkNvbG9yID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGlucHV0O1xuICB9XG5cbiAgaW50MzJDb2xvciA9IGludDMyQ29sb3IgfHwgMDtcblxuICBjb25zdCByID0gKGludDMyQ29sb3IgJiAweGZmMDAwMDAwKSA+Pj4gMjQ7XG4gIGNvbnN0IGcgPSAoaW50MzJDb2xvciAmIDB4MDBmZjAwMDApID4+PiAxNjtcbiAgY29uc3QgYiA9IChpbnQzMkNvbG9yICYgMHgwMDAwZmYwMCkgPj4+IDg7XG4gIGNvbnN0IGEgPSAoaW50MzJDb2xvciAmIDB4MDAwMDAwZmYpIC8gMjU1O1xuXG4gIHJldHVybiBgcmdiYSgke3J9LCAke2d9LCAke2J9LCAke2F9KWA7XG59XG5cbmNvbnN0IHN0cmluZ1NoYXBlUmVnZXggPSAvWzAtOVxcLi1dKy9nO1xuXG4vKipcbiAqIFN1cHBvcnRzIHN0cmluZyBzaGFwZXMgYnkgZXh0cmFjdGluZyBudW1iZXJzIHNvIG5ldyB2YWx1ZXMgY2FuIGJlIGNvbXB1dGVkLFxuICogYW5kIHJlY29tYmluZXMgdGhvc2UgdmFsdWVzIGludG8gbmV3IHN0cmluZ3Mgb2YgdGhlIHNhbWUgc2hhcGUuICBTdXBwb3J0c1xuICogdGhpbmdzIGxpa2U6XG4gKlxuICogICByZ2JhKDEyMywgNDIsIDk5LCAwLjM2KSAvLyBjb2xvcnNcbiAqICAgLTQ1ZGVnICAgICAgICAgICAgICAgICAgLy8gdmFsdWVzIHdpdGggdW5pdHNcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW50ZXJwb2xhdGlvbkZyb21TdHJpbmdPdXRwdXRSYW5nZShcbiAgY29uZmlnOiBJbnRlcnBvbGF0aW9uQ29uZmlnVHlwZSxcbik6IChpbnB1dDogbnVtYmVyKSA9PiBzdHJpbmcge1xuICBsZXQgb3V0cHV0UmFuZ2U6IEFycmF5PHN0cmluZz4gPSAoY29uZmlnLm91dHB1dFJhbmdlOiBhbnkpO1xuICBpbnZhcmlhbnQob3V0cHV0UmFuZ2UubGVuZ3RoID49IDIsICdCYWQgb3V0cHV0IHJhbmdlJyk7XG4gIG91dHB1dFJhbmdlID0gb3V0cHV0UmFuZ2UubWFwKGNvbG9yVG9SZ2JhKTtcbiAgY2hlY2tQYXR0ZXJuKG91dHB1dFJhbmdlKTtcblxuICAvLyBbJ3JnYmEoMCwgMTAwLCAyMDAsIDApJywgJ3JnYmEoNTAsIDE1MCwgMjUwLCAwLjUpJ11cbiAgLy8gLT5cbiAgLy8gW1xuICAvLyAgIFswLCA1MF0sXG4gIC8vICAgWzEwMCwgMTUwXSxcbiAgLy8gICBbMjAwLCAyNTBdLFxuICAvLyAgIFswLCAwLjVdLFxuICAvLyBdXG4gIC8qICRGbG93Rml4TWUoPj0wLjE4LjApOiBgb3V0cHV0UmFuZ2VbMF0ubWF0Y2goKWAgY2FuIHJldHVybiBgbnVsbGAuIE5lZWQgdG9cbiAgICogZ3VhcmQgYWdhaW5zdCB0aGlzIHBvc3NpYmlsaXR5LlxuICAgKi9cbiAgY29uc3Qgb3V0cHV0UmFuZ2VzID0gb3V0cHV0UmFuZ2VbMF0ubWF0Y2goc3RyaW5nU2hhcGVSZWdleCkubWFwKCgpID0+IFtdKTtcbiAgb3V0cHV0UmFuZ2UuZm9yRWFjaCh2YWx1ZSA9PiB7XG4gICAgLyogJEZsb3dGaXhNZSg+PTAuMTguMCk6IGB2YWx1ZS5tYXRjaCgpYCBjYW4gcmV0dXJuIGBudWxsYC4gTmVlZCB0byBndWFyZFxuICAgICAqIGFnYWluc3QgdGhpcyBwb3NzaWJpbGl0eS5cbiAgICAgKi9cbiAgICB2YWx1ZS5tYXRjaChzdHJpbmdTaGFwZVJlZ2V4KS5mb3JFYWNoKChudW1iZXIsIGkpID0+IHtcbiAgICAgIG91dHB1dFJhbmdlc1tpXS5wdXNoKCtudW1iZXIpO1xuICAgIH0pO1xuICB9KTtcblxuICAvKiAkRmxvd0ZpeE1lKD49MC4xOC4wKTogYG91dHB1dFJhbmdlWzBdLm1hdGNoKClgIGNhbiByZXR1cm4gYG51bGxgLiBOZWVkIHRvXG4gICAqIGd1YXJkIGFnYWluc3QgdGhpcyBwb3NzaWJpbGl0eS5cbiAgICovXG4gIGNvbnN0IGludGVycG9sYXRpb25zID0gb3V0cHV0UmFuZ2VbMF1cbiAgICAubWF0Y2goc3RyaW5nU2hhcGVSZWdleClcbiAgICAubWFwKCh2YWx1ZSwgaSkgPT4ge1xuICAgICAgcmV0dXJuIGNyZWF0ZUludGVycG9sYXRpb24oe1xuICAgICAgICAuLi5jb25maWcsXG4gICAgICAgIG91dHB1dFJhbmdlOiBvdXRwdXRSYW5nZXNbaV0sXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAvLyByZ2JhIHJlcXVpcmVzIHRoYXQgdGhlIHIsZyxiIGFyZSBpbnRlZ2Vycy4uLi4gc28gd2Ugd2FudCB0byByb3VuZCB0aGVtLCBidXQgd2UgKmRvbnQqIHdhbnQgdG9cbiAgLy8gcm91bmQgdGhlIG9wYWNpdHkgKDR0aCBjb2x1bW4pLlxuICBjb25zdCBzaG91bGRSb3VuZCA9IGlzUmdiT3JSZ2JhKG91dHB1dFJhbmdlWzBdKTtcblxuICByZXR1cm4gaW5wdXQgPT4ge1xuICAgIGxldCBpID0gMDtcbiAgICAvLyAncmdiYSgwLCAxMDAsIDIwMCwgMCknXG4gICAgLy8gLT5cbiAgICAvLyAncmdiYSgke2ludGVycG9sYXRpb25zWzBdKGlucHV0KX0sICR7aW50ZXJwb2xhdGlvbnNbMV0oaW5wdXQpfSwgLi4uJ1xuICAgIHJldHVybiBvdXRwdXRSYW5nZVswXS5yZXBsYWNlKHN0cmluZ1NoYXBlUmVnZXgsICgpID0+IHtcbiAgICAgIGNvbnN0IHZhbCA9ICtpbnRlcnBvbGF0aW9uc1tpKytdKGlucHV0KTtcbiAgICAgIGNvbnN0IHJvdW5kZWQgPVxuICAgICAgICBzaG91bGRSb3VuZCAmJiBpIDwgNCA/IE1hdGgucm91bmQodmFsKSA6IE1hdGgucm91bmQodmFsICogMTAwMCkgLyAxMDAwO1xuICAgICAgcmV0dXJuIFN0cmluZyhyb3VuZGVkKTtcbiAgICB9KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gaXNSZ2JPclJnYmEocmFuZ2UpIHtcbiAgcmV0dXJuIHR5cGVvZiByYW5nZSA9PT0gJ3N0cmluZycgJiYgcmFuZ2Uuc3RhcnRzV2l0aCgncmdiJyk7XG59XG5cbmZ1bmN0aW9uIGNoZWNrUGF0dGVybihhcnI6IEFycmF5PHN0cmluZz4pIHtcbiAgY29uc3QgcGF0dGVybiA9IGFyclswXS5yZXBsYWNlKHN0cmluZ1NoYXBlUmVnZXgsICcnKTtcbiAgZm9yIChsZXQgaSA9IDE7IGkgPCBhcnIubGVuZ3RoOyArK2kpIHtcbiAgICBpbnZhcmlhbnQoXG4gICAgICBwYXR0ZXJuID09PSBhcnJbaV0ucmVwbGFjZShzdHJpbmdTaGFwZVJlZ2V4LCAnJyksXG4gICAgICAnaW52YWxpZCBwYXR0ZXJuICcgKyBhcnJbMF0gKyAnIGFuZCAnICsgYXJyW2ldLFxuICAgICk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZmluZFJhbmdlKGlucHV0OiBudW1iZXIsIGlucHV0UmFuZ2U6IEFycmF5PG51bWJlcj4pIHtcbiAgbGV0IGk7XG4gIGZvciAoaSA9IDE7IGkgPCBpbnB1dFJhbmdlLmxlbmd0aCAtIDE7ICsraSkge1xuICAgIGlmIChpbnB1dFJhbmdlW2ldID49IGlucHV0KSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGkgLSAxO1xufVxuXG5mdW5jdGlvbiBjaGVja1ZhbGlkSW5wdXRSYW5nZShhcnI6IEFycmF5PG51bWJlcj4pIHtcbiAgaW52YXJpYW50KGFyci5sZW5ndGggPj0gMiwgJ2lucHV0UmFuZ2UgbXVzdCBoYXZlIGF0IGxlYXN0IDIgZWxlbWVudHMnKTtcbiAgZm9yIChsZXQgaSA9IDE7IGkgPCBhcnIubGVuZ3RoOyArK2kpIHtcbiAgICBpbnZhcmlhbnQoXG4gICAgICBhcnJbaV0gPj0gYXJyW2kgLSAxXSxcbiAgICAgIC8qICRGbG93Rml4TWUoPj0wLjEzLjApIC0gSW4gdGhlIGFkZGl0aW9uIGV4cHJlc3Npb24gYmVsb3cgdGhpcyBjb21tZW50LFxuICAgICAgICogb25lIG9yIGJvdGggb2YgdGhlIG9wZXJhbmRzIG1heSBiZSBzb21ldGhpbmcgdGhhdCBkb2Vzbid0IGNsZWFubHlcbiAgICAgICAqIGNvbnZlcnQgdG8gYSBzdHJpbmcsIGxpa2UgdW5kZWZpbmVkLCBudWxsLCBhbmQgb2JqZWN0LCBldGMuIElmIHlvdSByZWFsbHlcbiAgICAgICAqIG1lYW4gdGhpcyBpbXBsaWNpdCBzdHJpbmcgY29udmVyc2lvbiwgeW91IGNhbiBkbyBzb21ldGhpbmcgbGlrZVxuICAgICAgICogU3RyaW5nKG15VGhpbmcpXG4gICAgICAgKi9cbiAgICAgICdpbnB1dFJhbmdlIG11c3QgYmUgbW9ub3RvbmljYWxseSBub24tZGVjcmVhc2luZyAnICsgYXJyLFxuICAgICk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2hlY2tJbmZpbml0ZVJhbmdlKG5hbWU6IHN0cmluZywgYXJyOiBBcnJheTxudW1iZXI+KSB7XG4gIGludmFyaWFudChhcnIubGVuZ3RoID49IDIsIG5hbWUgKyAnIG11c3QgaGF2ZSBhdCBsZWFzdCAyIGVsZW1lbnRzJyk7XG4gIGludmFyaWFudChcbiAgICBhcnIubGVuZ3RoICE9PSAyIHx8IGFyclswXSAhPT0gLUluZmluaXR5IHx8IGFyclsxXSAhPT0gSW5maW5pdHksXG4gICAgLyogJEZsb3dGaXhNZSg+PTAuMTMuMCkgLSBJbiB0aGUgYWRkaXRpb24gZXhwcmVzc2lvbiBiZWxvdyB0aGlzIGNvbW1lbnQsXG4gICAgICogb25lIG9yIGJvdGggb2YgdGhlIG9wZXJhbmRzIG1heSBiZSBzb21ldGhpbmcgdGhhdCBkb2Vzbid0IGNsZWFubHkgY29udmVydFxuICAgICAqIHRvIGEgc3RyaW5nLCBsaWtlIHVuZGVmaW5lZCwgbnVsbCwgYW5kIG9iamVjdCwgZXRjLiBJZiB5b3UgcmVhbGx5IG1lYW5cbiAgICAgKiB0aGlzIGltcGxpY2l0IHN0cmluZyBjb252ZXJzaW9uLCB5b3UgY2FuIGRvIHNvbWV0aGluZyBsaWtlXG4gICAgICogU3RyaW5nKG15VGhpbmcpXG4gICAgICovXG4gICAgbmFtZSArICdjYW5ub3QgYmUgXS1pbmZpbml0eTsraW5maW5pdHlbICcgKyBhcnIsXG4gICk7XG59XG5cbmNsYXNzIEFuaW1hdGVkSW50ZXJwb2xhdGlvbiBleHRlbmRzIEFuaW1hdGVkV2l0aENoaWxkcmVuIHtcbiAgLy8gRXhwb3J0IGZvciB0ZXN0aW5nLlxuICBzdGF0aWMgX19jcmVhdGVJbnRlcnBvbGF0aW9uID0gY3JlYXRlSW50ZXJwb2xhdGlvbjtcblxuICBfcGFyZW50OiBBbmltYXRlZE5vZGU7XG4gIF9jb25maWc6IEludGVycG9sYXRpb25Db25maWdUeXBlO1xuICBfaW50ZXJwb2xhdGlvbjogKGlucHV0OiBudW1iZXIpID0+IG51bWJlciB8IHN0cmluZztcblxuICBjb25zdHJ1Y3RvcihwYXJlbnQ6IEFuaW1hdGVkTm9kZSwgY29uZmlnOiBJbnRlcnBvbGF0aW9uQ29uZmlnVHlwZSkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fcGFyZW50ID0gcGFyZW50O1xuICAgIHRoaXMuX2NvbmZpZyA9IGNvbmZpZztcbiAgICB0aGlzLl9pbnRlcnBvbGF0aW9uID0gY3JlYXRlSW50ZXJwb2xhdGlvbihjb25maWcpO1xuICB9XG5cbiAgX19tYWtlTmF0aXZlKCkge1xuICAgIHRoaXMuX3BhcmVudC5fX21ha2VOYXRpdmUoKTtcbiAgICBzdXBlci5fX21ha2VOYXRpdmUoKTtcbiAgfVxuXG4gIF9fZ2V0VmFsdWUoKTogbnVtYmVyIHwgc3RyaW5nIHtcbiAgICBjb25zdCBwYXJlbnRWYWx1ZTogbnVtYmVyID0gdGhpcy5fcGFyZW50Ll9fZ2V0VmFsdWUoKTtcbiAgICBpbnZhcmlhbnQoXG4gICAgICB0eXBlb2YgcGFyZW50VmFsdWUgPT09ICdudW1iZXInLFxuICAgICAgJ0Nhbm5vdCBpbnRlcnBvbGF0ZSBhbiBpbnB1dCB3aGljaCBpcyBub3QgYSBudW1iZXIuJyxcbiAgICApO1xuICAgIHJldHVybiB0aGlzLl9pbnRlcnBvbGF0aW9uKHBhcmVudFZhbHVlKTtcbiAgfVxuXG4gIGludGVycG9sYXRlKGNvbmZpZzogSW50ZXJwb2xhdGlvbkNvbmZpZ1R5cGUpOiBBbmltYXRlZEludGVycG9sYXRpb24ge1xuICAgIHJldHVybiBuZXcgQW5pbWF0ZWRJbnRlcnBvbGF0aW9uKHRoaXMsIGNvbmZpZyk7XG4gIH1cblxuICBfX2F0dGFjaCgpOiB2b2lkIHtcbiAgICB0aGlzLl9wYXJlbnQuX19hZGRDaGlsZCh0aGlzKTtcbiAgfVxuXG4gIF9fZGV0YWNoKCk6IHZvaWQge1xuICAgIHRoaXMuX3BhcmVudC5fX3JlbW92ZUNoaWxkKHRoaXMpO1xuICAgIHN1cGVyLl9fZGV0YWNoKCk7XG4gIH1cblxuICBfX3RyYW5zZm9ybURhdGFUeXBlKHJhbmdlOiBBcnJheTxhbnk+KSB7XG4gICAgcmV0dXJuIHJhbmdlLm1hcChOYXRpdmVBbmltYXRlZEhlbHBlci50cmFuc2Zvcm1EYXRhVHlwZSk7XG4gIH1cblxuICBfX2dldE5hdGl2ZUNvbmZpZygpOiBhbnkge1xuICAgIGlmIChfX0RFVl9fKSB7XG4gICAgICBOYXRpdmVBbmltYXRlZEhlbHBlci52YWxpZGF0ZUludGVycG9sYXRpb24odGhpcy5fY29uZmlnKTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgaW5wdXRSYW5nZTogdGhpcy5fY29uZmlnLmlucHV0UmFuZ2UsXG4gICAgICAvLyBPbmx5IHRoZSBgb3V0cHV0UmFuZ2VgIGNhbiBjb250YWluIHN0cmluZ3Mgc28gd2UgZG9uJ3QgbmVlZCB0byB0cmFuc2Zvcm0gYGlucHV0UmFuZ2VgIGhlcmVcbiAgICAgIG91dHB1dFJhbmdlOiB0aGlzLl9fdHJhbnNmb3JtRGF0YVR5cGUodGhpcy5fY29uZmlnLm91dHB1dFJhbmdlKSxcbiAgICAgIGV4dHJhcG9sYXRlTGVmdDpcbiAgICAgICAgdGhpcy5fY29uZmlnLmV4dHJhcG9sYXRlTGVmdCB8fCB0aGlzLl9jb25maWcuZXh0cmFwb2xhdGUgfHwgJ2V4dGVuZCcsXG4gICAgICBleHRyYXBvbGF0ZVJpZ2h0OlxuICAgICAgICB0aGlzLl9jb25maWcuZXh0cmFwb2xhdGVSaWdodCB8fCB0aGlzLl9jb25maWcuZXh0cmFwb2xhdGUgfHwgJ2V4dGVuZCcsXG4gICAgICB0eXBlOiAnaW50ZXJwb2xhdGlvbicsXG4gICAgfTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEFuaW1hdGVkSW50ZXJwb2xhdGlvbjtcbiJdfQ==